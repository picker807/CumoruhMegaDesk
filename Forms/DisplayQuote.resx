<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAYwEB
        AZ0AAAGFAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAABhQEBAZ0AAABjAAAAAwAA
        AAsDBgvAGjRh/wkTI+8AAAAxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEJEyPvGjRh/wMG
        C78AAAALAAAADAUJEcApU5j/Dx437wAAADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMg8e
        N+8pU5j/BQkRwAAAAAwAAAAMBQkRwClSlv8PHTbvAAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAoAAAALAAAACwAAAAsAAAALAAAACwAA
        AAgAAAA7Dh028ClSlv8FCRHAAAAADAAAAAwFCRHAKVKW/w8dNu8AAAAyAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAwAAAAFhCgsOxA4QFcQPERbEEBMYxBAT
        GMQPERbEDRAVwwgJDNAOHTT7KVKW/wUJEcAAAAAMAAAADAUJEcApUpb/Dx027wAAADIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQMEBKJZZYD/hpnB/3qM
        sf9peZn/aXmY/3eJrP98k77/WW6T/xUkPv8oUpb/BQkRwAAAAAwAAAAMBQkRwClSlv8PHTbvAAAAMgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBAQGonCA
        ov+rw/f/e42y/zI5SP8wNkX/bHub/5+88/9xjLv/FiZB/yhRlv8FCRHAAAAADAAAAAsFChHAKVKX/w4d
        NfMAAABlAAAAPgAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAA
        AEEDBAW6Z3aV/5qx3/+Tqtb/i6DJ/4ugyf+SqNP/kKvd/2iAq/8WJkD/KFGW/wUJEcAAAAAMAAAAARgx
        WoYvYK//Dx01/hUgM/gbK0X2GypE9hsqRPYbKkT2GypE9hsqRPYbKkT2GypE9hsqRPYbKkT2GypE9hsq
        RPYbKkT2GypE9goQGfwiJi7/MzlF/zI4Rf8zOkb/MzpG/zM5Rf8vNkT/IScy/xAfN/8pUpb/BQkRwAAA
        AAxZsv8AJUuKcDFkuP8SIz7/RGmq/1eG2v9WhNf/VoTX/1aE1/9WhNf/VoTX/1aE1/9WhNf/VoTX/1aE
        1/9WhNf/VoTX/1aE1/9Wg9b/IjNR/3F5if+qt9D/oq7G/5eiuP+Xorf/oazD/5uszP9sfJv/FiU//yhR
        lv8FCRHAAAAADAAAAAoGDBa6KVOZ/xMkQP9Ga67/WYnf/1iH3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH
        3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iG2/8jNFT/ipSn/9Hg//+Worj/PEFJ/zk+Rv+EjqD/v9L6/4SX
        vv8YJ0H/KFGW/wUJEcAAAAAMAAAADAUJEcAoUpb/EyRA/0Zrrv9Zid//WIfc/1iH3P9Yh9z/WIfc/1iH
        3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH3P9Yh9z/WIbb/yM0U/97hJT/uMfh/6u40f+YpLr/mKO5/6i1
        zP+put3/doap/xcmQP8oUZb/BQkRwAAAAAwAAAAMBQkRwChSlv8TJED/Rmuu/1mJ3/9Yh9z/WIfc/1iH
        3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH3P9Yh9v/ITJR/yIkKv80OUT/NDlE/zY7
        Rv82O0b/NDpE/zA2Q/8hJzH/EB82/ylSlv8FCRHAAAAADAAAAAwFCRHAKFKW/xMkQP9Ga67/WYnf/1iH
        3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iH3P9Yh9z/WIfc/1iG2/8iNFP/X22J/5Cl
        0f+Hm8X/e42z/3uNsv+FmcH/hp/O/2B3n/8VJT//KFKW/wUJEcAAAAAMAAAADAQJEMAnT5D/EyM+/0ds
        sP9aiuH/WYje/1mI3v9ZiN7/WYje/1mI3v9ZiN7/WYje/1mI3v9ZiN7/WYje/1mI3v9ZiN7/WYfd/yM0
        VP9xgKH/q8P3/3uMsf8xOEb/LzVD/2t7mv+fvPP/cYy7/xYlP/8nTpD/BAkQwAAAAAwAAAAdAwcMyB4+
        cf8PHDL/Pl6Z/094w/9Od8H/TnfB/053wf9Od8H/TnfB/053wf9Od8H/TnfB/053wf9Od8H/TnfB/053
        wf9OdsD/Hy5J/2JvjP+TqNT/ip7H/32Ptf99j7T/iJvD/4mh0f9jeaL/Eh4z/x4+cf8DBwzIAAAAHQED
        BckGDRj3CxYo/wgRH/8PGi7/ER40/xEeNP8RHjT/ER40/xEeNP8RHjT/ER40/xEeNP8RHjT/ER40/xEe
        NP8RHjT/ER40/xEeNP8KFCP/FB0s/xslNv8bJTb/HCY3/xwmN/8bJTb/GiQ2/xQfL/8JER//ChQm/wUL
        FfcBAgXJBw4a/yFGhP8kTpH/JU6R/yRNkP8kTZD/JE2Q/yRNkP8kTZD/JE2Q/yRNkP8kTZD/JE2Q/yRN
        kP8kTZD/JE2Q/yRNkP8kTZD/JE2Q/yVOkf8kTZH/JE2Q/yRNkP8kTZD/JE2Q/yRNkP8jTI7/I0yO/yRN
        kP8iSIb/HkB4/wYMF/8FChL9FzJd/xo3aP8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/xo3
        Z/8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/xo3Z/8aN2f/Gjdn/yNK
        ivclT5L1Gjhp/xgzYP8VLVX/BAkR/QAAAH8AAQKaAAECmgABApoAAQKaAAECmgABApoAAQKaAAECmgAB
        ApoAAQKaAAECmgABApoAAQKaAAECmgABApoAAQKaAAECmgABApoAAQKaAAECmgABApoAAQKaAAECmgAB
        ApoAAQKZDx86WxYuVkwBAgSVAAECmgABApoAAAB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////B///4Af//+AH///gB//gAAf/
        4AAH/8AAB//AAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///////////////////////////////8=
</value>
  </data>
</root>